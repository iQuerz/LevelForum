@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using LevelForum.Components.Other
@using Entities = LevelForum.Data.Entities
@using LevelForum.Data.Services
@using LevelForum.Infrastructure
@inject VoteService _voteService
@inject AppUserService _userService

<div class="post-header app-card">
  <div class="ph-wrap">
    <div class="ph-vote">
      <button type="button"
              class="vote-btn up"
              aria-label="Upvote"
              aria-pressed="@(_myVote == 1 ? "true" : "false")"
              disabled="@IsVoteDisabled"
              @onclick="() => HandleVote(+1)">‚ñ≤</button>

      <div class="ph-score @( _myVote == 1 ? "is-up" : _myVote == -1 ? "is-down" : null)" aria-live="polite">@_score</div>

      <button type="button"
              class="vote-btn down"
              aria-label="Downvote"
              aria-pressed="@(_myVote == -1 ? "true" : "false")"
              disabled="@IsVoteDisabled"
              @onclick="() => HandleVote(-1)">‚ñº</button>
    </div>

    <div class="ph-body">
      <h1 class="ph-title">
        @Title
        @if (TopicLocked)
        {
          <span class="chip ph-chip-lock" title="Topic locked">üîí Locked</span>
        }
      </h1>

      <div class="ph-meta">
        <a class="chip ph-chip-topic" href="@($"/topic/{TopicId}")">@TopicTitle</a>
        <span class="ph-dot">‚Ä¢</span>
        <span class="ph-author">@AuthorName</span>
        <span class="ph-dot">‚Ä¢</span>
        <time class="ph-time" title="@CreatedAt.ToLocalTime().ToString("g")">@TimeAgo(CreatedAt)</time>

        <span class="ph-flex"></span>

        <ReportButton TargetType="Entities.ContentType.Post"
                      TargetId="@Id" />

        @if (_canModerateTopic)
        {
          <button type="button"
                  class="icon-btn"
                  title="Delete post"
                  @onclick="() => OnDeletePost.InvokeAsync(Id)">üóëÔ∏è</button>
        }

        @if (ShowActionsMenu)
        {
          <div class="ph-menu">
            <button type="button" class="icon-btn" aria-expanded="@_menuOpen" aria-haspopup="menu" @onclick="ToggleMenu">‚ãÆ</button>
            @if (_menuOpen)
            {
              <div class="ph-menu-pop" role="menu">
                @if (CanEditPost)
                {
                  <button type="button" class="ph-menu-item" role="menuitem" @onclick="() => { _menuOpen=false; OnEditPost.InvokeAsync(Id);}">Edit post</button>
                }
                @if (CanDeletePost)
                {
                  <button type="button" class="ph-menu-item danger" role="menuitem" @onclick="() => { _menuOpen=false; OnDeletePost.InvokeAsync(Id);}">Delete post</button>
                }
              </div>
            }
          </div>
        }
      </div>
    </div>
  </div>
</div>

@code{
  [CascadingParameter] protected Task<AuthenticationState>? authState { get; set; }
  protected ClaimsPrincipal UserClaims => authState?.Result.User ?? new();
  int? CurrentUserId => UserClaims.UserId();

  [Parameter] public int Id { get; set; }
  [Parameter] public string Title { get; set; } = string.Empty;
  [Parameter] public int TopicId { get; set; }
  [Parameter] public string TopicTitle { get; set; } = string.Empty;
  [Parameter] public bool TopicLocked { get; set; }
  [Parameter] public string AuthorName { get; set; } = string.Empty;
  [Parameter] public DateTime CreatedAt { get; set; }
  [Parameter] public int Score { get; set; }
  [Parameter] public int? MyVote { get; set; }
  [Parameter] public bool CanEditPost { get; set; }
  [Parameter] public bool CanDeletePost { get; set; }
  [Parameter] public EventCallback<int> OnReport { get; set; }
  [Parameter] public EventCallback<int> OnEditPost { get; set; }
  [Parameter] public EventCallback<int> OnDeletePost { get; set; }

  bool _menuOpen;
  int _score;
  int? _myVote;
  bool _voteDisabled;
  bool _canModerateTopic;

  bool ShowActionsMenu => CanEditPost || CanDeletePost;
  bool IsVoteDisabled => _voteDisabled || TopicLocked || !UserClaims.IsAuthenticated();

  protected override async Task OnParametersSetAsync()
  {
    _score = Score;
    _myVote = MyVote;

    _canModerateTopic = false;

    if (UserClaims.IsAuthenticated())
    {
      if (UserClaims.HasAtLeastRole(Entities.AppRole.Moderator))
      {
        _canModerateTopic = true;
        return;
      }

      var uid = CurrentUserId;
      if (uid.HasValue)
      {
        var roles = await _userService.GetTopicRolesAsync(TopicId);
        _canModerateTopic = roles.Any(r => r.AppUserId == uid.Value && r.HasAtLeast(Entities.AppRole.Moderator));
      }
    }
  }

  async Task HandleVote(int v)
  {
    if (!UserClaims.IsAuthenticated()) return;

    var old = _myVote ?? 0;
    var next = (old == v) ? 0 : v;

    _voteDisabled = true;
    _myVote = next == 0 ? (int?)null : next;
    _score += (next - old);
    StateHasChanged();

    try
    {
      var newScore = await _voteService.ToggleVoteAsync(Entities.ContentType.Post, Id, CurrentUserId!.Value, next);
      _score = newScore;
    }
    catch
    {
      _myVote = old == 0 ? null : old;
      _score -= (next - old);
    }
    finally
    {
      _voteDisabled = false;
      StateHasChanged();
    }
  }

  void ToggleMenu() => _menuOpen = !_menuOpen;

  static string TimeAgo(DateTime utc)
  {
    var dt = utc.ToLocalTime();
    var span = DateTime.Now - dt;
    if (span.TotalSeconds < 60) return "just now";
    if (span.TotalMinutes < 60) return $"{(int)span.TotalMinutes}m";
    if (span.TotalHours < 24) return $"{(int)span.TotalHours}h";
    if (span.TotalDays < 7) return $"{(int)span.TotalDays}d";
    return dt.ToString("yyyy-MM-dd");
  }
}

<style>
  .post-header{ padding:12px }
  .ph-wrap{ display:flex; gap:12px }
  .ph-vote{ width:52px; display:flex; flex-direction:column; align-items:center; gap:4px; padding:2px 0 }
  .ph-score{ min-width:28px; text-align:center; font-weight:600; color:var(--text) }

  .ph-body{ flex:1; display:flex; flex-direction:column; gap:6px }
  .ph-title{ font-size:24px; margin:0; color:var(--text) }
  .ph-chip-topic{ background:var(--surface-2); color:var(--text); border:1px solid var(--border-color) }
  .ph-chip-lock{ background:var(--warning); color:var(--on-warning); border:1px solid transparent; margin-left:8px; font-size:12px; padding:2px 6px; border-radius:999px }
  .ph-meta{ display:flex; align-items:center; gap:8px; color:var(--muted) }
  .ph-dot{ opacity:.7 } .ph-flex{ flex:1 }

  .ph-menu{ position:relative }
  .ph-menu-pop{ position:absolute; right:0; top:32px; min-width:160px; background:var(--surface);
    border:1px solid var(--border-color); border-radius:10px; box-shadow:0 12px 40px rgba(0,0,0,.35); padding:6px; z-index:20 }
  .ph-menu-item{ width:100%; text-align:left; background:transparent; border:none; color:var(--text);
    padding:8px 10px; border-radius:8px; cursor:pointer }
  .ph-menu-item:hover{ background:rgba(255,255,255,.06) }
  .ph-menu-item.danger{ color:var(--on-danger); background:var(--danger); border-radius:8px }
  .ph-menu-item.danger:hover{ filter:brightness(0.95) }

  .vote-btn{
    border:1px solid var(--border-color);
    background:transparent;
    border-radius:8px;
    width:34px; height:28px; cursor:pointer;
    transition: background-color .18s ease, border-color .18s ease, color .18s ease, transform .05s ease;
    outline: none; line-height:1;
  }
  .vote-btn:active{ transform: translateY(1px); }
  .vote-btn:focus-visible{
    box-shadow: 0 0 0 3px rgba(79,70,229,.35);
    border-color: var(--primary-light);
  }
  .vote-btn.up:hover{
    background: var(--success-lighter);
    color: var(--on-success-lighter);
    border-color: var(--success-light);
  }
  .vote-btn.down:hover{
    background: var(--danger-lighter);
    color: var(--on-danger-lighter);
    border-color: var(--danger-light);
  }
  .vote-btn.up[aria-pressed="true"]{ color: var(--success); }
  .vote-btn.down[aria-pressed="true"]{ color: var(--danger); }
  .vote-btn.up[aria-pressed="true"]:hover{ border-color: var(--success-darker); }
  .vote-btn.down[aria-pressed="true"]:hover{ border-color: var(--danger-darker); }
  .vote-btn[disabled]{ opacity:.4; cursor:not-allowed; box-shadow:none; }
  .ph-score.is-up{ color: var(--success-dark); }
  .ph-score.is-down{ color: var(--danger-dark); }

  .icon-btn {
    background: transparent;
    border: none;
    font-size: 16px;
    cursor: pointer;
    padding: 2px;
    color: var(--muted);
  }
  .icon-btn:hover {
    color: var(--text);
  }
</style>
