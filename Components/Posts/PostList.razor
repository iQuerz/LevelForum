@using System.Collections.Generic
@using System.Security.Claims
@using Entities = LevelForum.Data.Entities
@using LevelForum.Data.Services
@using LevelForum.Infrastructure
@inject VoteService _voteService

<div class="post-list">
  @if (IsLoading && (Items is null || !Items.Any()))
  {
    @* initial skeletons *@
    <div class="app-card post-skel"><div class="skel skel-title"></div><div class="skel skel-line"></div><div class="skel skel-line w-85"></div></div>
    <div class="app-card post-skel"><div class="skel skel-title"></div><div class="skel skel-line"></div><div class="skel skel-line w-85"></div></div>
    <div class="app-card post-skel"><div class="skel skel-title"></div><div class="skel skel-line"></div><div class="skel skel-line w-85"></div></div>
  }
  else if (Items is not null && Items.Any())
  {
    @foreach (var p in Items)
    {
      <div class="app-card post-card">
        <div class="vote-col">
          <button class="vote-btn up"
                  disabled="@IsVoteDisabled(p)"
                  aria-pressed="@(p.MyVote == 1 ? "true" : "false")"
                  @onclick="() => HandleVote(p.Id, 1)">
            ▲
          </button>
          <div class="score @(p.MyVote == 1 ? "is-up" : p.MyVote == -1 ? "is-down" : null)">@p.Score</div>
          <button class="vote-btn down"
                  disabled="@IsVoteDisabled(p)"
                  aria-pressed="@(p.MyVote == -1 ? "true" : "false")"
                  @onclick="() => HandleVote(p.Id, -1)">
            ▼
          </button>
        </div>

        <div class="content-col">
          <div class="title-row">
            <a class="post-title" href="@($"/post/{p.Id}")">@p.Title</a>
          </div>
          <div class="meta-row">
            <span class="chip">@p.TopicTitle</span>
            <span>• by @p.AuthorName</span>
            <span>• @p.CreatedAt.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</span>
            @if (p.TopicLocked) { <span class="lock-pill">Locked</span> }
            <span style="flex:1"></span>
            <button class="linklike" @onclick="@(async () => await HandleReport(p.Id))">Report</button>
          </div>
        </div>
      </div>
    }

    @if (ShowLoadMore)
    {
      <div class="list-loadmore">
        <button type="button" class="btn-ghost" disabled="@IsLoadingMore" @onclick="LoadMore">
          @if (IsLoadingMore) { <span class="spinner"></span> } Load more
        </button>
      </div>
    }
  }
  else
  {
    <div class="app-card empty-block">
      <div class="empty-title">No posts found</div>
      <div class="empty-sub">Try a different search or reset filters.</div>
    </div>
  }
</div>

@code{
  [CascadingParameter] protected Task<AuthenticationState>? authState { get; set; }
  protected ClaimsPrincipal UserClaims => authState?.Result.User ?? new();
  int? CurrentUserId => UserClaims.UserId();
  
  public record PostListItem(
      int Id, string Title, int TopicId, string TopicTitle,
      string AuthorName, DateTime CreatedAt, int Score, int? MyVote,
      int CommentsCount, bool TopicLocked, bool VoteDisabled = false);

  [Parameter] public IList<PostListItem>? Items { get; set; }

  [Parameter] public bool IsLoading { get; set; } = false;
  [Parameter] public bool ShowLoadMore { get; set; } = true;
  [Parameter] public bool IsLoadingMore { get; set; } = false;

  [Parameter] public EventCallback OnLoadMore { get; set; }

  Task LoadMore() => OnLoadMore.InvokeAsync();

  bool IsVoteDisabled(PostListItem it) => !UserClaims.IsAuthenticated() || it.VoteDisabled || it.TopicLocked;

  async Task HandleVote(int postId, int value)
  {
      if (Items is null) return;
      var idx = Items.ToList().FindIndex(p => p.Id == postId);
      if (idx < 0 || ! UserClaims.IsAuthenticated()) return;

      var it = Items[idx];
      var oldVote = it.MyVote ?? 0;
      var next = (oldVote == value) ? 0 : value;

      // optimistic UI + disable while request is running
      Items[idx] = it with
      {
          VoteDisabled = true,
          MyVote = next == 0 ? null : next,
          Score = it.Score + (next - oldVote)
      };
      StateHasChanged();

      try
      {
          var newScore = await _voteService.ToggleVoteAsync(
              Entities.ContentType.Post, postId, CurrentUserId.Value, next);

          Items[idx] = Items[idx] with
          {
              Score = newScore,
              VoteDisabled = false,
              MyVote = next == 0 ? null : next,
          };
      }
      catch
      {
          // revert on failure
          Items[idx] = it;
      }
      finally
      {
          StateHasChanged();
      }
  }

  async Task HandleReport(int postId)
  {
    
  }
}

<style>
  .post-list{ display:flex; flex-direction:column; gap:12px }
  .list-loadmore{ display:flex; justify-content:center; margin-top:8px }
  .btn-ghost{ border:1px solid var(--border-color); background:transparent; color:var(--text);
    border-radius:10px; padding:8px 14px; cursor:pointer }
  .btn-ghost:hover{ background:rgba(255,255,255,.06) }

  /* SKELETONS */
  .post-skel{ padding:12px }
  .skel{ background:linear-gradient(90deg, rgba(255,255,255,.06) 25%, rgba(255,255,255,.12) 37%, rgba(255,255,255,.06) 63%);
    background-size:400% 100%; animation:shimmer 1.2s ease-in-out infinite; border-radius:8px; height:14px }
  .skel-title{ height:20px; width:60%; margin-bottom:10px }
  .skel-line{ height:14px; width:100%; margin:6px 0 }
  .w-85{ width:85% }
  @@keyframes shimmer{0%{background-position:100% 0}100%{background-position:0 0}}

  /* Post card */
  .post-card{ display:flex; gap:12px; padding:12px }
  .vote-col{ display:flex; flex-direction:column; align-items:center; gap:6px; width:42px }
  .vote-btn{ border:1px solid var(--border-color); background:transparent; border-radius:8px; width:34px; height:28px; cursor:pointer }
  .vote-btn[disabled]{ opacity:.4; cursor:not-allowed }
  .score{ font-weight:600 }
  .content-col{ display:flex; flex-direction:column; gap:6px; flex:1 }
  .title-row{ font-size:1.05rem; font-weight:650 }
  .post-title{ color:var(--text); text-decoration:none }
  .post-title:hover{ text-decoration:underline }
  .meta-row{ display:flex; align-items:center; gap:8px; font-size:.9rem; opacity:.85 }
  .linklike{ background:transparent; border:none; color:var(--text); text-decoration:underline; cursor:pointer }
  .lock-pill{ border:1px solid var(--border-color); padding:2px 6px; border-radius:999px; font-size:.8rem }

  .vote-btn{
    border:1px solid var(--border-color);
    background:transparent;
    border-radius:8px;
    width:34px; height:28px; cursor:pointer;
    transition: background-color .18s ease, border-color .18s ease, color .18s ease, transform .05s ease;
    outline: none;
  }
  .vote-btn:active{ transform: translateY(1px); }
  .vote-btn:focus-visible{
    box-shadow: 0 0 0 3px rgba(79,70,229,.35);
    border-color: var(--primary-light);
  }
  .vote-btn.up:hover{
    background: var(--success-lighter);
    color: var(--on-success-lighter);
    border-color: var(--success-light);
  }
  .vote-btn.down:hover{
    background: var(--danger-lighter);
    color: var(--on-danger-lighter);
    border-color: var(--danger-light);
  }

  .vote-btn.up[aria-pressed="true"]{
    color: var(--success);
    border-color: var(--success-dark);
  }
  .vote-btn.down[aria-pressed="true"]{
    color: var(--danger);
    border-color: var(--danger-dark);
  }

  .vote-btn.up[aria-pressed="true"]:hover{ border-color: var(--success-darker); }
  .vote-btn.down[aria-pressed="true"]:hover{ border-color: var(--danger-darker); }

  .vote-btn[disabled]{ opacity:.4; cursor:not-allowed; box-shadow:none; }

  .score.is-up{ color: var(--success-dark); }
  .score.is-down{ color: var(--danger-dark); }

</style>
