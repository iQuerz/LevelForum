@using System.Security.Claims
@using LevelForum.Data.Services
@using LevelForum.Infrastructure
@using Microsoft.AspNetCore.Components
@inject TopicFollowService _followService

<button type="button"
        class="follow-chip @(LocalFollow ? "is-on" : null)"
        disabled="@Disabled"
        @onclick="Toggle">
    @(LocalFollow ? "Following" : "Follow")
</button>

@code{
    [Parameter] public bool IsFollowed { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public int TopicId { get; set; }
    [Parameter] public EventCallback<bool> OnChange { get; set; } // emits new value
    
    [CascadingParameter] protected Task<AuthenticationState>? authState { get; set; }
    protected ClaimsPrincipal UserClaims => authState?.Result.User ?? new();
    int? CurrentUserId => UserClaims.UserId();

    private bool LocalFollow;
    private bool _initialized;

    protected override void OnParametersSet()
    {
        if (!_initialized || LocalFollow != IsFollowed)
        {
            LocalFollow = IsFollowed;
            _initialized = true;
        }
    }

    private async Task Toggle()
    {
        if (Disabled || !UserClaims.IsAuthenticated()) return;
        LocalFollow = !LocalFollow;
        await OnChange.InvokeAsync(LocalFollow);
        if (LocalFollow)
            await _followService.FollowAsync(CurrentUserId.Value, TopicId);
        else
            await _followService.UnfollowAsync(CurrentUserId.Value, TopicId);
    }
}

<style>
    /* follow toggle */
    .follow-chip {
        border: 1px solid var(--border-color);
        background: transparent;
        color: var(--text);
        border-radius: 999px;
        padding: 6px 12px;
        cursor: pointer;
    }
    .follow-chip:hover { background: rgba(255,255,255,.06); }
    .follow-chip.is-on {
        background: var(--primary);
        color: var(--on-primary);
        border-color: transparent;
    }
</style>