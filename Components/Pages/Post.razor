@page "/post/{Id:int}"
@using System.Security.Claims
@using LevelForum.Components.Layout
@using LevelForum.Components.Posts
@using LevelForum.Components.Comments
@using LevelForum.Components.Shared
@using LevelForum.Data.Services
@using LevelForum.Infrastructure
@inject NavigationManager Nav
@inject PostService _postService
@inject CommentService _commentService

<PageContainer Width="narrow">
    @if (_loading)
    {
        <div class="app-card" style="padding:12px;">
            <div class="skel skel-title"></div>
            <div class="skel skel-line"></div>
            <div class="skel skel-line w-85"></div>
        </div>
    }
    else if (_post is not null)
    {
        <PostHeader Id="@_post.Id"
                    Title="@_post.Title"
                    TopicId="@_post.TopicId"
                    TopicTitle="@_post.Topic.Title"
                    TopicLocked="@_post.Topic.IsLocked"
                    AuthorName="@_post.Author.Username"
                    CreatedAt="@_post.CreatedAt"
                    Score="@_postScore"
                    MyVote="@_myVote"
                    CanEditPost="@_canEdit"
                    CanDeletePost="@_canEdit"
                    OnReport="ReportPost"
                    OnEditPost="EditPost"
                    OnDeletePost="DeletePost" />

        <PostBody Text="@_post.Body" />

        <div style="height:8px"></div>

        @if (!_post.Topic.IsLocked)
        {
            <CommentComposer CanPost="@(CurrentUserId>0)"
                             Placeholder="Write a commentâ€¦"
                             MaxChars="2000"
                             OnSubmit="AddTopComment" />
        }
        else
        {
            <div class="app-card" style="padding:12px;">Topic is locked. You cannot reply.</div>
        }

        <div style="height:8px"></div>

        <CommentThread PostId="@_post.Id"
                       TopicLocked="@_post.Topic.IsLocked"
                       MaxChars="2000" 
                       @ref="_commentsRef" />
    }
    else
    {
        <div class="app-card" style="padding:12px;">Post not found.</div>
    }
</PageContainer>

@code{
    [Parameter] public int Id { get; set; }
    [CascadingParameter] protected Task<AuthenticationState>? authState { get; set; }
    protected ClaimsPrincipal UserClaims => authState?.Result.User ?? new();
    int? CurrentUserId => UserClaims.UserId();

    private CommentThread? _commentsRef;
    
    LevelForum.Data.Entities.Post? _post;
    bool _loading = true;

    int _postScore = 0;
    int? _myVote = null;

    bool _canEdit = false;

    protected override async Task OnParametersSetAsync()
    {
        _loading = true;
        StateHasChanged();

        _post = await _postService.GetByIdAsync(Id, userId: CurrentUserId);
        if (_post is not null)
        {
            _postScore = _post.Score;
            _myVote = _post.MyVote;
            _canEdit = (_post.AuthorId == CurrentUserId);
        }

        _loading = false;
    }

    private async Task AddTopComment(string text)
    {
        if (_post is null || !UserClaims.IsAuthenticated()) return;
        await _commentService.CreateAsync(_post.Id, CurrentUserId.Value, text, null);
        
        if (_commentsRef is not null)
        {
            await _commentsRef.ReloadFromStart();
        }
    }

    private Task ReportPost(int postId) => Task.CompletedTask;

    private Task EditPost(int postId)
    {
        Nav.NavigateTo($"/post/{postId}/edit");
        return Task.CompletedTask;
    }

    private Task DeletePost(int postId)
    {
        Nav.NavigateTo("/");
        return Task.CompletedTask;
    }
}

<style>
  .skel{ background:linear-gradient(90deg, rgba(255,255,255,.06) 25%, rgba(255,255,255,.12) 37%, rgba(255,255,255,.06) 63%);
    background-size:400% 100%; animation:shimmer 1.2s ease-in-out infinite; border-radius:8px; height:14px }
  .skel-title{ height:20px; width:60%; margin-bottom:10px }
  .skel-line{ height:14px; width:100%; margin:6px 0 }
  .w-85{ width:85% }
  @@keyframes shimmer{0%{background-position:100% 0}100%{background-position:0 0}}
</style>
