@page "/topic/{Id:int}"
@using LevelForum.Components.Layout
@using LevelForum.Components.Posts
@using LevelForum.Components.Other
@using LevelForum.Components.Shared
@using LevelForum.Data.Services
@using Entities = LevelForum.Data.Entities

@inject PostService _postService
@inject TopicService _topicService
@inject VoteService _voteService

<PageContainer Title="@TopicToView.Title">
    <div class="app-card" style="padding:12px; display:flex; gap:8px; align-items:center;">
        <span class="chip">@TopicToView.Title</span>
        <FollowToggle IsFollowed="@_followed" OnChange="v => _followed = v" />
        <span style="flex:1"></span>
        <LockToggle Locked="@_locked" OnToggle="v => _locked = v" />
    </div>

    <div style="height:8px"></div>

    <ListToolbar SearchValue="@_q"
                 SearchValueChanged="v => _q = v"
                 OnSearch="DoSearch"
                 SortValue="@_sort"
                 SortValueChanged="v => _sort = v" />

    <PostList Items="@_items"
              IsLoading="@_loading"
              ShowLoadMore="@_hasMore"
              IsLoadingMore="@_loadingMore"
              OnLoadMore="LoadMore"
              OnVote="HandleVote"
              OnReport="HandleReport" />
</PageContainer>

@code{
    [Parameter] public int Id { get; set; }
    Entities.Topic TopicToView { get; set; } = new();
    int CurrentUserId = 2;

    private string _title = "Topic";
    private bool _followed = true;
    private bool _locked = false;

    private string? _q;
    private string _sort = "new";
    private bool _loading = true;
    private bool _loadingMore;
    private bool _hasMore = true;
    private int _page = 0;

    private List<PostList.PostListItem> _items = [];

    protected override async Task OnParametersSetAsync()
    {
        TopicToView = await _topicService.GetByIdAsync(Id);
        _title = TopicToView.Title;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadMore();
    }

    private Task DoSearch(string? q)
    {
        _loading = true;
        StateHasChanged();
        _items = _items
            .Where(p => string.IsNullOrWhiteSpace(q) || p.Title.Contains(q!, StringComparison.OrdinalIgnoreCase))
            .ToList();
        _loading = false;
        return Task.CompletedTask;
    }

    private async Task LoadMore()
    {
        _loadingMore = true;
        StateHasChanged();
        
        var newItems = await _postService.QueryByTopicAsync(
            topicId: Id,
            titleQuery: null,
            sort: _sort,
            page: ++_page,
            pageSize: 20);

        foreach (var item in newItems.Items)
        {
            _items.Add(new PostList.PostListItem(
                Id: item.Id,
                Title: item.Title,
                TopicId: item.TopicId,
                TopicTitle: item.Topic.Title,
                AuthorName: item.Author.Username,
                CreatedAt: item.CreatedAt,
                Score: 0,
                MyVote: 0,
                CommentsCount: 0,
                TopicLocked: item.Topic.IsLocked,
                VoteDisabled: item.IsDeleted || item.Topic.IsLocked));
        }
        
        _hasMore = true;
        _loadingMore = false;
    }

    private async Task HandleVote((int postId, int value) ev)
    {
        var idx = _items.FindIndex(p => p.Id == ev.postId);
        if (idx < 0 /*|| CurrentUserId <= 0*/) return; // uključi proveru usera ako ti treba

        var it = _items[idx];
        var oldVote = it.MyVote ?? 0;
        var next = (oldVote == ev.value) ? 0 : ev.value;

        // Optimističko ažuriranje + onemogući klik dok traje request
        _items[idx] = it with
        {
            VoteDisabled = true,
            MyVote = next == 0 ? (int?)null : next,
            Score = it.Score + (next - oldVote)
        };
        StateHasChanged();

        try
        {
            // Server vraća zbir glasova nakon izmene
            // (pretpostavka: ContentType.Post jer smo na /topic listi postova)
            var newScore = await _voteService.ToggleVoteAsync(Entities.ContentType.Post, ev.postId, CurrentUserId, next);

            _items[idx] = _items[idx] with
            {
                Score = newScore,
                VoteDisabled = false
            };
        }
        catch
        {
            // Greška -> vrati stari prikaz
            _items[idx] = it;
        }
        finally
        {
            StateHasChanged();
        }
    }


    private Task HandleReport(int postId) => Task.CompletedTask;
}
