@page "/topic/{Id:int}"
@using LevelForum.Components.Layout
@using LevelForum.Components.Posts
@using LevelForum.Components.Other
@using LevelForum.Components.Shared

<PageContainer Title="@_title">
    <div class="app-card" style="padding:12px; display:flex; gap:8px; align-items:center;">
        <span class="chip">@_title</span>
        <FollowToggle IsFollowed="@_followed" OnChange="v => _followed = v" />
        <span style="flex:1"></span>
        <LockToggle Locked="@_locked" OnToggle="v => _locked = v" />
    </div>

    <div style="height:8px"></div>

    <ListToolbar SearchValue="@_q"
                 SearchValueChanged="v => _q = v"
                 OnSearch="DoSearch"
                 SortValue="@_sort"
                 SortValueChanged="v => _sort = v" />

    <PostList Items="@_items"
              IsLoading="@_loading"
              ShowLoadMore="@_hasMore"
              IsLoadingMore="@_loadingMore"
              OnLoadMore="LoadMore"
              OnVote="HandleVote"
              OnReport="HandleReport" />
</PageContainer>

@code{
    [Parameter] public int Id { get; set; }

    private string _title = "Topic";
    private bool _followed = true;
    private bool _locked = false;

    private string? _q;
    private string _sort = "new";
    private bool _loading = true;
    private bool _loadingMore;
    private bool _hasMore = true;

    private List<PostList.PostListItem> _items = new();

    protected override void OnParametersSet()
    {
        _title = Id switch { 1 => "General", 2 => "News", _ => $"Topic {Id}" };
        if (_items.Count == 0)
        {
            for (int i = 1; i <= 6; i++)
            {
                _items.Add(new PostList.PostListItem(
                    Id: Id * 100 + i,
                    Title: $"Post in {_title} #{i}",
                    TopicId: Id,
                    TopicTitle: _title,
                    AuthorName: "User",
                    CreatedAt: DateTime.UtcNow.AddMinutes(-7 * i),
                    Score: i % 9,
                    MyVote: 0,
                    CommentsCount: i + 1,
                    TopicLocked: _locked,
                    VoteDisabled: false
                ));
            }
            _loading = false;
        }
    }

    private Task DoSearch(string? q)
    {
        _loading = true;
        StateHasChanged();
        _items = _items
            .Where(p => string.IsNullOrWhiteSpace(q) || p.Title.Contains(q!, StringComparison.OrdinalIgnoreCase))
            .ToList();
        _loading = false;
        return Task.CompletedTask;
    }

    private async Task LoadMore()
    {
        _loadingMore = true;
        StateHasChanged();
        await Task.Delay(250);
        var start = _items.Count + 1;
        for (int i = start; i < start + 4; i++)
        {
            _items.Add(new PostList.PostListItem(
                Id: Id * 100 + i,
                Title: $"More in {_title} #{i}",
                TopicId: Id,
                TopicTitle: _title,
                AuthorName: "User",
                CreatedAt: DateTime.UtcNow.AddMinutes(-6 * i),
                Score: (i * 2) % 10,
                MyVote: 0,
                CommentsCount: i % 5,
                TopicLocked: _locked,
                VoteDisabled: false
            ));
        }
        _hasMore = _items.Count < 24;
        _loadingMore = false;
    }

    private Task HandleVote((int postId, int value) ev)
    {
        var idx = _items.FindIndex(p => p.Id == ev.postId);
        if (idx < 0) return Task.CompletedTask;

        var it = _items[idx];
        var old = it.MyVote ?? 0;
        var next = (old == ev.value) ? 0 : ev.value;
        var delta = next - old;
        _items[idx] = it with { MyVote = next == 0 ? (int?)null : next, Score = it.Score + delta };
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task HandleReport(int postId) => Task.CompletedTask;
}
