@page "/"
@using System.Security.Claims
@using LevelForum.Components.Layout
@using LevelForum.Components.Posts
@using LevelForum.Components.Shared
@using LevelForum.Data.Services
@using LevelForum.Infrastructure
@inject PostService _postService

<PageContainer Title="Home">
    <ListToolbar @bind-SearchValue="@Search"
                 @bind-SortValue="@Sort"/>

    <PostList Items="@_items"
              IsLoading="@_loading"
              ShowLoadMore="@_hasMore"
              IsLoadingMore="@_loadingMore"
              OnLoadMore="LoadMore"/>
              @* OnReport="HandleReport" /> *@
</PageContainer>

@code{
    [CascadingParameter] protected Task<AuthenticationState>? authState { get; set; }
    protected ClaimsPrincipal UserClaims => authState?.Result.User ?? new();
    private int? CurrentUserId => UserClaims.UserId();
    
    private bool _loading = true;
    private bool _loadingMore;
    private bool _hasMore = true;
    
    private int _page = 0;
    private const int PageSize = 20;
    
    private string _sort = "new";
    string Sort
    {
        get => _sort;
        set
        {
            if (_sort == value) return;
            _sort = value;
            InvokeAsync(HandleSort);
        }
    }

    string? _search = null; 
    string? Search
    {
        get => _search;
        set
        {
            _search = value;
            InvokeAsync(HandleSearch);
        }
    }

    private List<PostList.PostListItem> _items = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadMore();
        _loading = false;
    }

    private Task DoSearch(string? q)
    {
        _loading = true;
        StateHasChanged();
        _items = _items
            .Where(p => string.IsNullOrWhiteSpace(q) || p.Title.Contains(q!, StringComparison.OrdinalIgnoreCase))
            .ToList();
        _loading = false;
        return Task.CompletedTask;
    }

    private async Task LoadMore()
    {
        _loadingMore = true;
        _loading = true;
        StateHasChanged();

        var page = ++_page;
        var res = await _postService.QueryAsync(
            titleQuery: _search,
            sort: _sort,
            page: page,
            userId: CurrentUserId,
            pageSize: PageSize);

        foreach (var item in res.Items)
        {
            _items.Add(new PostList.PostListItem(
                Id: item.Id,
                Title: item.Title,
                TopicId: item.TopicId,
                TopicTitle: item.Topic.Title,
                AuthorName: item.Author.Username,
                CreatedAt: item.CreatedAt,
                Score: item.Score,
                MyVote: item.MyVote,
                CommentsCount: 0,
                TopicLocked: item.Topic.IsLocked,
                VoteDisabled: item.IsDeleted || item.Topic.IsLocked));
        }

        _hasMore = _items.Count < res.Total;
        _loadingMore = false;
        _loading = false;
        StateHasChanged();
    }

    private Task HandleReport(int postId)
    {
        // TODO: wire to report flow
        return Task.CompletedTask;
    }

    private async Task HandleSort()
    {
        _items.Clear();
        _page = 0;
        await LoadMore();
    }

    async Task HandleSearch()
    {
        _items.Clear();
        _page = 0;
        await LoadMore();
    }
}
