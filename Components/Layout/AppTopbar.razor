@using System.Security.Claims
@using System.Timers
@using LevelForum.Infrastructure
@using System.Text.RegularExpressions
@using LevelForum.Data.Entities
@using LevelForum.Data.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web

@inject TopicService _topicService
@inject NavigationManager Nav

<div class="app-topbar">
    <div class="tb-left">
        <button class="icon-btn show-sm" aria-label="Open menu" @onclick="ToggleSidebar">‚ò∞</button>
        <a href="/" class="brand">@Title</a>
    </div>

    <div class="tb-center">
        <div class="tb-search-wrap"
             @onfocusin="() => _open = true"
             @onfocusout="HandleFocusOut">
            <input class="tb-search"
                   placeholder="Search topics‚Ä¶"
                   @oninput="HandleInput"
                   @onkeydown="HandleKey"
                   value="@_q"
                   aria-label="Search topics"
                   aria-autocomplete="list"
                   aria-controls="search-listbox"
                   aria-expanded="@_open"
                   role="combobox"
                   @ref="_inputRef" />

            @if (_open)
            {
                <div class="search-popover" role="listbox" id="search-listbox">
                    @if (_isLoading)
                    {
                        <div class="search-item muted" aria-live="polite">Searching‚Ä¶</div>
                    }
                    else if (_suggestions?.Count > 0)
                    {
                        @for (var i = 0; i < _suggestions.Count; i++)
                        {
                            var t = _suggestions[i];
                            var isActive = i == _activeIndex;
                            <button type="button"
                                    class="search-item @(isActive ? "active" : null)"
                                    role="option"
                                    aria-selected="@isActive"
                                    @onclick="() => SelectTopic(t)">
                                <span class="topic-title">@((MarkupString)HighlightMatch(t.Title, _q))</span>
                            </button>
                        }
                        <div class="search-footer">
                            <span>‚Üµ open ‚Ä¢ ‚Üë‚Üì navigate ‚Ä¢ Esc close</span>
                        </div>
                    }
                    else
                    {
                        <div class="search-item muted">No topics found</div>
                    }
                </div>
            }
        </div>
    </div>

    <div class="tb-right">
        @if(UserClaims.IsAuthenticated())
        {
            <span>@UserClaims.Username()</span>
            <button class="icon-btn" title="Account" @onclick="@(() => Nav.NavigateTo("/account"))">üë§</button>
            <button class="icon-btn" title="Log out" @onclick="@(() => Nav.Logout())">‚û°Ô∏è</button>
        }
        else
        {
            <span>
                <a href="/Identity/Account/Login">Log in</a> /
                <a href="/Identity/Account/Register"> Register </a>
            </span>
        }
    </div>
</div>

@if (_sidebarOpen)
{
    <div class="drawer-backdrop" @onclick="ToggleSidebar"></div>
    <aside class="drawer">
        <div class="drawer-hdr">
            <strong>Menu</strong>
            <button class="icon-btn" title="Close" @onclick="ToggleSidebar">‚úï</button>
        </div>
        <nav class="drawer-nav">
            <a href="/">Home</a>
            <a href="/topics">Topics</a>
            <a href="/new">New Topic</a>
        </nav>
    </aside>
}

<style>
    /* TOPBAR */
    .app-topbar{ display:flex; align-items:center; gap:12px; height:56px; padding:0 12px; max-width:1120px; margin:0 auto; }
    .tb-left{ display:flex; align-items:center; gap:10px }
    .tb-center{ flex:1; display:flex; justify-content:center }
    .tb-right{ display:flex; align-items:center; gap:10px }
    .brand{ font-weight:700; font-size:18px; color:var(--text) }
    .tb-search{ width:min(520px, 100%); background:var(--surface-2,#1b2130); border:1px solid rgba(255,255,255,.08);
        border-radius:10px; color:var(--text); padding:8px 12px; line-height:1; }
    .icon-btn{ position:relative; display:inline-flex; align-items:center; justify-content:center;
        width:36px; height:36px; border-radius:8px; background:transparent; border:1px solid rgba(255,255,255,.1);
        color:var(--text); cursor:pointer; }
    .icon-btn:hover{ background:rgba(255,255,255,.06) }
    .badge{ position:absolute; top:-6px; right:-6px; background:var(--primary,#4f46e5); color:#fff;
        border-radius:999px; font-size:11px; padding:2px 6px; line-height:1; }
    .avatar{ width:32px; height:32px; border-radius:50%; background:#2a3142; display:flex; align-items:center; justify-content:center; font-weight:700 }
    .show-sm{ display:none }
    @@media (max-width:960px){ .show-sm{ display:inline-flex } }

    /* Autocomplete */
    .tb-search-wrap{ position:relative; width:min(520px, 100%); }
    .search-popover{
        position:absolute; top:calc(100% + 6px); left:0; right:0; z-index:20;
        background:var(--surface-2,#1b2130); border:1px solid rgba(255,255,255,.08); border-radius:10px;
        box-shadow:0 8px 24px rgba(0,0,0,.3); overflow:hidden;
        max-height:360px; display:flex; flex-direction:column;
    }
    .search-item{
        display:flex; align-items:center; gap:8px; width:100%; text-align:left;
        padding:10px 12px; border:0; background:transparent; color:var(--text); cursor:pointer;
    }
    .search-item:hover, .search-item.active{ background:rgba(255,255,255,.06) }
    .search-item.muted{ color:rgba(255,255,255,.6); cursor:default }
    .topic-title mark{
        background:rgba(79,70,229,.25);
        color:inherit; padding:0 .1em; border-radius:3px;
    }
    .search-footer{
        margin-top:auto; padding:8px 12px; font-size:12px; color:rgba(255,255,255,.6); border-top:1px solid rgba(255,255,255,.06);
        display:flex; justify-content:flex-end;
    }

    /* Drawer (self-contained sidebar) */
    .drawer-backdrop{
        position:fixed; inset:0; background:rgba(0,0,0,.4); z-index:30;
    }
    .drawer{
        position:fixed; top:0; left:0; bottom:0; width:280px; z-index:31;
        background:var(--surface-2,#1b2130); border-right:1px solid rgba(255,255,255,.08);
        box-shadow: 0 8px 24px rgba(0,0,0,.35); display:flex; flex-direction:column;
        animation: slideIn .18s ease-out;
    }
    .drawer-hdr{ display:flex; align-items:center; justify-content:space-between; padding:12px; border-bottom:1px solid rgba(255,255,255,.08); }
    .drawer-nav{ display:flex; flex-direction:column; padding:8px }
    .drawer-nav a{ padding:10px 12px; border-radius:8px; color:var(--text); text-decoration:none; }
    .drawer-nav a:hover{ background:rgba(255,255,255,.06) }
    @@keyframes slideIn{ from{ transform:translateX(-16px); opacity:.8 } to{ transform:translateX(0); opacity:1 } }
</style>

@code{
    [CascadingParameter] protected Task<AuthenticationState>? authState { get; set; }
    protected ClaimsPrincipal UserClaims => authState?.Result.User ?? new();

    [Parameter] public string Title { get; set; } = "LevelForum";
    [Parameter] public int UnreadCount { get; set; }

    string? _q;
    ElementReference _inputRef;

    List<Topic> _suggestions = new();
    bool _open;
    bool _isLoading;
    int _activeIndex = -1;
    CancellationTokenSource? _searchCts;
    bool _sidebarOpen;

    void ToggleSidebar() => _sidebarOpen = !_sidebarOpen;

    void HandleInput(ChangeEventArgs e)
    {
        _q = e.Value?.ToString();
        _ = DebouncedSearchAsync(); // internal-only debounce/search
    }

    async Task DebouncedSearchAsync()
    {
        _searchCts?.Cancel();
        _searchCts = new CancellationTokenSource();
        var ct = _searchCts.Token;

        _isLoading = true;
        _open = true;
        StateHasChanged();

        try
        {
            await Task.Delay(180, ct);

            if (string.IsNullOrWhiteSpace(_q))
            {
                _suggestions = new();
                _activeIndex = -1;
                _isLoading = false;
                await InvokeAsync(StateHasChanged);
                return;
            }

            var page = await _topicService.SearchAsync(_q, page: 1, pageSize: 8, ct: ct);
            _suggestions = page.Items ?? new();
            _activeIndex = _suggestions.Count > 0 ? 0 : -1;
        }
        catch (TaskCanceledException) { }
        finally
        {
            _isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    void HandleKey(KeyboardEventArgs e)
    {
        if (!_open && (e.Key == "ArrowDown" || e.Key == "ArrowUp"))
            _open = true;

        if (e.Key == "Escape")
        {
            _open = false;
            return;
        }

        if (_suggestions.Count == 0)
        {
            // if no suggestions and Enter pressed with a query, optionally navigate to a search page
            if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(_q))
                Nav.NavigateTo($"/topics?query={Uri.EscapeDataString(_q)}");
            return;
        }

        if (e.Key == "ArrowDown")
            _activeIndex = Math.Min(_activeIndex + 1, _suggestions.Count - 1);
        else if (e.Key == "ArrowUp")
            _activeIndex = Math.Max(_activeIndex - 1, 0);
        else if (e.Key == "Enter" && _activeIndex >= 0)
            _ = SelectTopic(_suggestions[_activeIndex]);
    }

    async Task SelectTopic(Topic t)
    {
        _q = t.Title;
        _open = false;
        _activeIndex = -1;

        // Navigate to a topic details page; adjust route to your app if different
        Nav.NavigateTo($"/topic/{t.Id}");
        await Task.CompletedTask;
    }

    async void HandleFocusOut(FocusEventArgs _)
    {
        await Task.Delay(120);
        _open = false;
        StateHasChanged();
    }

    static string HighlightMatch(string text, string? query)
    {
        if (string.IsNullOrWhiteSpace(query)) return text;
        try
        {
            var rx = new Regex(Regex.Escape(query), RegexOptions.IgnoreCase);
            return rx.Replace(text, m => $"<mark>{m.Value}</mark>");
        }
        catch { return text; }
    }
}
